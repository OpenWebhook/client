{"version":3,"mappings":"mJAAqB,UAAoB,CACrC,MAAMA,EAAU,SAAS,cAAc,MAAM,EAAE,QAC/C,GAAIA,GAAWA,EAAQ,UAAYA,EAAQ,SAAS,eAAe,EAC/D,OAEJ,UAAWC,KAAQ,SAAS,iBAAiB,2BAA2B,EACpEC,EAAeD,CAAI,EAEvB,IAAI,iBAAkBE,GAAc,CAChC,UAAWC,KAAYD,EACnB,GAAIC,EAAS,OAAS,YAGtB,UAAWC,KAAQD,EAAS,WACpBC,EAAK,UAAY,QAAUA,EAAK,MAAQ,iBACxCH,EAAeG,CAAI,CAGvC,CAAK,EAAE,QAAQ,SAAU,CAAE,UAAW,GAAM,QAAS,EAAI,CAAE,EACvD,SAASC,EAAaC,EAAQ,CAC1B,MAAMC,EAAY,GAClB,OAAID,EAAO,YACPC,EAAU,UAAYD,EAAO,WAC7BA,EAAO,iBACPC,EAAU,eAAiBD,EAAO,gBAClCA,EAAO,cAAgB,kBACvBC,EAAU,YAAc,UACnBD,EAAO,cAAgB,YAC5BC,EAAU,YAAc,OAExBA,EAAU,YAAc,cACrBA,CACV,CACD,SAASN,EAAeD,EAAM,CAC1B,GAAIA,EAAK,GAEL,OACJA,EAAK,GAAK,GAEV,MAAMO,EAAYF,EAAaL,CAAI,EACnC,MAAMA,EAAK,KAAMO,CAAS,CAC7B,CACL,2tBCxCa,QAAyBC,EAAM,cAAc,CACxD,MAAO,sCACP,SAAWC,GAAsB,CAEjC,CACF,CAAC,ECPYC,EAAqB,gBACrBC,EAAmB,cACnBC,EAAkB,cCKlBC,EAAsBC,GAAoB,CAErD,MAAMC,EAAa,GADJ,IAAI,IAAID,CAAO,EAAE,iBAE1BE,EAAQD,EAAW,QAAQ,OAAQ,IAAI,EAEvCE,EAAW,IAAIC,EAAS,CAC5B,IAAKH,EACN,EAEKI,EAAWC,EAAW,MAAOC,EAAG,CAAE,aAAc,CAChD,MAAc,aAAa,QAAQV,CAAgB,EACvD,GAAI,CAACW,EAAa,CACV,QAAgB,aAAa,QAAQZ,CAAkB,EACzDa,IACYD,QAAME,EAAeD,EAAeT,CAAO,EAE7D,CACO,OACL,QAAS,CACP,GAAGW,EACH,cAAeH,EAAc,UAAUA,IAAgB,EACzD,EACF,CACD,EAGKI,EAAS,IAAIC,EACjBC,EAAa,CACX,IAAKZ,EACL,iBAAkB,CAChB,UAAW,aAAa,QAAQL,CAAgB,CAClD,EACD,GAGGkB,EAAYC,EAChB,CAAC,CAAE,WAAY,CACP,QAAaC,EAAkBC,CAAK,EAC1C,OACEC,EAAW,OAAS,uBACpBA,EAAW,YAAc,cAE7B,EACAP,EACAP,EAAS,OAAOF,CAAQ,GAG1B,OAAO,IAAIiB,EAAa,CACtB,KAAML,EACN,MAAO,IAAIM,CAAc,CAC1B,CACH,EAEMX,EAAiB,MACrBD,EACAa,IACoB,CACpB,MAAMC,EAAuB,IAAI,IAAID,CAAe,EAAE,SAchDE,EAAO,MAbc,MAAM,MAC/B,yEACA,CACE,QAAS,CACP,cAAe,UAAUf,IACzB,eAAgB,kBAClB,EACA,OAAQ,OACR,KAAM,KAAK,UAAU,CACnB,gBAAiBc,EAClB,CACH,IAEoC,OAClC,KAAK,WAAa,IACZ,oBAAM,uBAAwBC,CAAI,EACpC,IAAI,MAAMA,EAAK,OAAO,EAE9B,MAAMhB,EAAcgB,EAAK,YACZ,4BAAQ3B,EAAkBW,CAAW,EAE3CA,CACT,ECpFaiB,EAAyB,CACpCC,EACAC,EACAC,IACyC,CACzC,MAAMC,EACJ,aAAa,QAAQH,CAAe,GAAKC,EACrC,CAACG,EAAOC,CAAQ,EAAIC,mBAASH,CAAsB,EAYlD,OAACC,EAXkCG,GAAqB,CACzDL,EAAUK,CAAQ,GACP,qBAAQP,EAAiBO,CAAQ,EAC9CF,EAASE,CAAQ,GAEjB,QAAQ,KAAK,+BAA+B,EAEtCC,UAAQ,GAAGR,mBAAkC,CACnD,MAAOO,EACR,EAE4C,CACjD,ECvBO,SAASE,EAAeC,EAAkB,CAC3C,MAEA,IACIC,MAAI,IAAID,CAAQ,QAEf,QACT,CAEA,OAAOC,EAAI,WAAa,SAAWA,EAAI,WAAa,QACtD,CCNA,MAAMC,EAAW5C,EAAM,KACrB,IAAM6C,aAAO,mKACf,EACMC,EAAe9C,EAAM,KAAK,UAAM,OAAO,wBAAW,uMAGlD+C,EAAc/C,EAAM,KACxB,IAAM6C,aAAO,0QACf,EASA,SAAwBG,GAAM,CAC5B,MAAMC,EACJ,OAAO,SAAS,WAAa,sBACzB,sCACA,OAAO,SAAS,OAEhB,CAACrB,EAAiBsB,CAAmB,EAAInB,EAC7C,kBACAkB,EACAR,GAIA,uBAACU,EAAuB,SAAvB,CACC,MAAO,CACL,MAAOvB,EACP,SAAUsB,CACZ,GAEClD,mBAAe,OAAQK,EAAmBuB,CAAe,GACvD5B,mBAAM,KAAMoD,EAAM,MAAM,sBACtBC,mBAAS,UAAWrD,2BAAI,YAAU,GAChCA,mBAAS,OAAQA,gBAAC8C,EAAa,OAC7B9C,sBAAY,CACf,CACF,CACF,CACF,EAGN,CC1CA,MAAMsD,EACJ,OAAO,SAAS,WAAa,uBAC3BA,IACF,OAAO,SAAS,KAAO,sDAGzBC,EAAY,UAAU,CACpB,OAAQ,2CACR,YAAa,YACf,CAAC,EAEDf,EAAQ,KAAK,kDAAgD,CAC3D,SAAU,yBACZ,CAAC,EAED,MAAMgB,EAAwB,IAAM,CACtB,aAAa,QAAQpD,CAAe,IAE1C,OAAO,SAAS,OAAO,WAAW,mBAAmB,EAC1C,qBAAQA,EAAiB,aAAa,EAEtC,qBAAQA,EAAiB,YAAY,EAGxD,EAEAoD,IAEA,MAAMC,EAAOC,EAAS,WACpB,SAAS,eAAe,MAAM,CAChC,EAEAD,EAAK,OACHzD,gBAAC2D,EAAyB,aAAaJ,CACrC,kBAACvD,EAAM,WAAN,KACCA,gBAACgD,EAAI,KACP,CACF,CACF","names":["relList","link","processPreload","mutations","mutation","node","getFetchOpts","script","fetchOpts","React","_newValue","IDENTITY_TOKEN_KEY","ACCESS_TOKEN_KEY","ENVIRONMENT_KEY","createApolloClient","httpUrl","graphqlUrl","wsUrl","httpLink","HttpLink","authLink","setContext","_","accessToken","identityToken","getAccessToken","headers","wsLink","GraphQLWsLink","createClient","splitLink","split","getMainDefinition","query","definition","ApolloClient","InMemoryCache","webhookStoreUrl","webhookStoreHostname","json","useStateInLocalStorage","localStorageKey","initialValue","validator","initialWebhookStoreUrl","value","setValue","useState","newValue","posthog","isValidHttpUrl","maybeUrl","url","AppFrame","__vitePreload","SkillsTopNav","WebhookList","App","defaultWebhookStoreUrl","setWebhooksStoreUrl","WebhookStoreUrlContext","Theme","Suspense","autoRedirectOnGithubAuth","Honeybadger","initEnvInLocalStorage","root","ReactDOM","HoneybadgerErrorBoundary"],"sources":["../../vite/modulepreload-polyfill","../../src/NavBar/WebhookStoreUrl/WebhookStoreUrl.context.ts","../../src/local-storage.ts","../../src/apollo.client.ts","../../src/use-state-with-local-storage.hook.ts","../../src/utils/is-valid-url.ts","../../src/App.tsx","../../src/main.tsx"],"sourcesContent":["__VITE_IS_MODERN__&&(function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n}());","import React from \"react\";\n\nexport const WebhookStoreUrlContext = React.createContext({\n  value: \"https://webhook-store.herokuapp.com\",\n  setValue: (_newValue: string) => {\n    return;\n  },\n});\n","export const IDENTITY_TOKEN_KEY = \"identityToken\";\nexport const ACCESS_TOKEN_KEY = \"accessToken\";\nexport const ENVIRONMENT_KEY = \"environment\";\n","import { ApolloClient, InMemoryCache, HttpLink, split } from \"@apollo/client\";\nimport { GraphQLWsLink } from \"@apollo/client/link/subscriptions\";\nimport { getMainDefinition } from \"@apollo/client/utilities\";\nimport { createClient } from \"graphql-ws\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { ACCESS_TOKEN_KEY, IDENTITY_TOKEN_KEY } from \"./local-storage\";\n\nexport const createApolloClient = (httpUrl: string) => {\n  const origin = new URL(httpUrl).origin;\n  const graphqlUrl = `${origin}/graphql`;\n  const wsUrl = graphqlUrl.replace(\"http\", \"ws\");\n\n  const httpLink = new HttpLink({\n    uri: graphqlUrl,\n  });\n\n  const authLink = setContext(async (_, { headers }) => {\n    var accessToken = localStorage.getItem(ACCESS_TOKEN_KEY);\n    if (!accessToken) {\n      const identityToken = localStorage.getItem(IDENTITY_TOKEN_KEY);\n      if (identityToken) {\n        accessToken = await getAccessToken(identityToken, httpUrl);\n      }\n    }\n    return {\n      headers: {\n        ...headers,\n        authorization: accessToken ? `Bearer ${accessToken}` : \"\",\n      },\n    };\n  });\n\n  //@Samox TODO make sure the WSlink uses the accesstoken right after it is created or refreshed\n  const wsLink = new GraphQLWsLink(\n    createClient({\n      url: wsUrl,\n      connectionParams: {\n        authToken: localStorage.getItem(ACCESS_TOKEN_KEY),\n      },\n    })\n  );\n\n  const splitLink = split(\n    ({ query }) => {\n      const definition = getMainDefinition(query);\n      return (\n        definition.kind === \"OperationDefinition\" &&\n        definition.operation === \"subscription\"\n      );\n    },\n    wsLink,\n    authLink.concat(httpLink)\n  );\n\n  return new ApolloClient({\n    link: splitLink,\n    cache: new InMemoryCache(),\n  });\n};\n\nconst getAccessToken = async (\n  identityToken: string,\n  webhookStoreUrl: string\n): Promise<string> => {\n  const webhookStoreHostname = new URL(webhookStoreUrl).hostname;\n  const accessTokenRequest = await fetch(\n    `${import.meta.env.VITE_AUTH_TENANT_URL}/webhook-store-auth/access-token`,\n    {\n      headers: {\n        Authorization: `Bearer ${identityToken}`,\n        \"Content-Type\": \"application/json\",\n      },\n      method: \"POST\",\n      body: JSON.stringify({\n        webhookStoreUrl: webhookStoreHostname,\n      }),\n    }\n  );\n  const json = await accessTokenRequest.json();\n  if (json.statusCode > 300) {\n    console.error(\"Cannot refresh token\", json);\n    throw new Error(json.message);\n  }\n  const accessToken = json.accessToken;\n  localStorage.setItem(ACCESS_TOKEN_KEY, accessToken);\n\n  return accessToken;\n};\n","import posthog from \"posthog-js\";\nimport { useState } from \"react\";\n\nexport const useStateInLocalStorage = (\n  localStorageKey: string,\n  initialValue: string,\n  validator: (newValue: string) => boolean\n): [string, (newValue: string) => void] => {\n  const initialWebhookStoreUrl =\n    localStorage.getItem(localStorageKey) || initialValue;\n  const [value, setValue] = useState(initialWebhookStoreUrl);\n  const setWebhookStoreURLInLocalStorage = (newValue: string) => {\n    if (validator(newValue)) {\n      localStorage.setItem(localStorageKey, newValue);\n      setValue(newValue);\n    } else {\n      console.warn(\"invalid new value, not stored\");\n    }\n    posthog.capture(`${localStorageKey} update attempt`, {\n      value: newValue,\n    });\n  };\n  return [value, setWebhookStoreURLInLocalStorage];\n};\n","export function isValidHttpUrl(maybeUrl: string) {\n  let url;\n\n  try {\n    url = new URL(maybeUrl);\n  } catch (_) {\n    return false;\n  }\n\n  return url.protocol === \"http:\" || url.protocol === \"https:\";\n}\n","import \"@pluralsight/ps-design-system-normalize\";\n\nimport React, { Suspense } from \"react\";\n\nconst AppFrame = React.lazy(\n  () => import(\"@pluralsight/ps-design-system-appframe\")\n);\nconst SkillsTopNav = React.lazy(() => import(\"./TopNav\"));\nimport Theme from \"@pluralsight/ps-design-system-theme\";\n\nconst WebhookList = React.lazy(\n  () => import(\"./WebhookDisplay/WebhookList.component\")\n);\nimport { ApolloProvider } from \"@apollo/client\";\nimport { WebhookStoreUrlContext } from \"./NavBar/WebhookStoreUrl/WebhookStoreUrl.context\";\nimport { createApolloClient } from \"./apollo.client\";\nimport { useStateInLocalStorage } from \"./use-state-with-local-storage.hook\";\nimport { isValidHttpUrl } from \"./utils/is-valid-url\";\n\n// https://coolors.co/23f0c7-fb6107-f3de2c-5c8001-fbb02d\n\nexport default function App() {\n  const defaultWebhookStoreUrl =\n    window.location.hostname === \"demo.openwebhook.io\"\n      ? \"https://webhook-store.herokuapp.com\"\n      : window.location.origin;\n\n  const [webhookStoreUrl, setWebhooksStoreUrl] = useStateInLocalStorage(\n    \"webhookStoreUrl\",\n    defaultWebhookStoreUrl,\n    isValidHttpUrl\n  );\n\n  return (\n    <WebhookStoreUrlContext.Provider\n      value={{\n        value: webhookStoreUrl,\n        setValue: setWebhooksStoreUrl,\n      }}\n    >\n      <ApolloProvider client={createApolloClient(webhookStoreUrl)}>\n        <Theme name={Theme.names.dark}>\n          <Suspense fallback={<div>Loading...</div>}>\n            <AppFrame topnav={<SkillsTopNav />}>\n              <WebhookList />\n            </AppFrame>\n          </Suspense>\n        </Theme>\n      </ApolloProvider>\n    </WebhookStoreUrlContext.Provider>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport Honeybadger from \"@honeybadger-io/js\";\nimport { HoneybadgerErrorBoundary } from \"@honeybadger-io/react\";\nimport posthog from \"posthog-js\";\nimport { ENVIRONMENT_KEY } from \"./local-storage\";\n\nconst autoRedirectOnGithubAuth =\n  window.location.hostname === \"github.webhook.store\";\nif (autoRedirectOnGithubAuth) {\n  window.location.href = `${import.meta.env.VITE_AUTH_TENANT_URL}/oauth/login`;\n}\n\nHoneybadger.configure({\n  apiKey: import.meta.env.VITE_HONEYBADGER_API_KEY as string,\n  environment: import.meta.env.MODE,\n});\n\nposthog.init(import.meta.env.VITE_POSTHOG_API_KEY as string, {\n  api_host: \"https://app.posthog.com\",\n});\n\nconst initEnvInLocalStorage = () => {\n  const env = localStorage.getItem(ENVIRONMENT_KEY);\n  if (!env) {\n    if (window.location.origin.startsWith(\"http://localhost:\")) {\n      localStorage.setItem(ENVIRONMENT_KEY, \"development\");\n    } else {\n      localStorage.setItem(ENVIRONMENT_KEY, \"production\");\n    }\n  }\n};\n\ninitEnvInLocalStorage();\n\nconst root = ReactDOM.createRoot(\n  document.getElementById(\"root\") as HTMLElement\n);\n\nroot.render(\n  <HoneybadgerErrorBoundary honeybadger={Honeybadger}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </HoneybadgerErrorBoundary>\n);\n"],"file":"assets/index.31fb59e4.js"}